{"version":3,"sources":["components/Container/Container.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-selector.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Container/Container.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","getContacts","state","contacts","getFilter","filter","getFilterContacts","lowerCaseFilter","toLowerCase","name","includes","sort","a","b","localeCompare","addContact","createAction","deleteContacts","changeContact","ContactForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","contactInputId","shortid","generate","handleChange","e","target","value","formSubmitHandler","item","normalizedName","find","el","alert","console","log","reset","onSubmit","preventDefault","id","className","s","form","htmlFor","labelForm","formInput","type","onChange","pattern","title","required","btnAdd","ContactList","contactList","map","contactItem","nameForm","numberForm","btnDelete","onClick","svgBtnDelete","src","alt","defaultProps","Container","children","container","Filter","filterLabel","App","initialState","contactsInit","contactReducer","createReducer","payload","contact","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","rootReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.19687249.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__Z5ey2\",\"title\":\"Container_title__VB2CH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__2X7Wm\",\"formInput\":\"Filter_formInput__qBe0D\"};","export const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getFilterContacts = state => {\r\n    const lowerCaseFilter = getFilter(state).toLowerCase();\r\n    const filteredContacts = getContacts(state).filter(({ name }) =>\r\n        name.toLowerCase().includes(lowerCaseFilter))\r\n        .sort((a, b) => a.name.localeCompare(b.name));\r\n    return filteredContacts\r\n};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContact = createAction('contacts/add');\r\nexport const deleteContacts = createAction('contacts/delete');\r\nexport const changeContact = createAction('contacts/changeContact');\r\n\r\n\r\n\r\n//===================REDUX_WITHOUT_TOOLKIT=================//\r\n\r\n// import { ADD,DELETE,CHANGE_FILTER} from \"./contacts-types\";\r\n\r\n// export const addContact = contact => ({\r\n//     type:  ADD,\r\n//    payload: contact\r\n// });\r\n\r\n// export const deleteContacts = id => ({\r\n//     type: DELETE,\r\n//     payload: id,\r\n// });\r\n\r\n// export const changeContact = filter => ({\r\n//     type: CHANGE_FILTER,\r\n//     payload: filter,\r\n// });\r\n","import { useState } from \"react\";\nimport shortid from \"shortid\";\nimport s from \"./ContactForm.module.css\";\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { getContacts} from \"../../redux/contacts/contacts-selector\";\nimport { addContact } from '../../redux/contacts/contacts-actions';\n\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contactInputId = shortid.generate();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    formSubmitHandler({ name, number, id: contactInputId });\n\n    reset();\n  };\n\n\n  const formSubmitHandler = item => {\n  \n    const normalizedName = item.name.toLowerCase();\n    contacts.find(el => { return el.name.toLowerCase() === normalizedName }\n    )\n      ? alert(`${item.name} is already in contacts`)\n      : contacts.find(\n        el => { return el.number.toLowerCase() === item.number },\n      )\n        ? alert(`${item.number} is already in contacts`)\n        : dispatch(addContact(item));\n    console.log(item);\n    \n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label htmlFor={contactInputId} className={s.labelForm}>\n        Name\n      </label>\n      <input\n        className={s.formInput}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        id={contactInputId}\n        required\n      />\n      <br />\n      <label htmlFor={contactInputId} className={s.labelForm}>\n        {\" \"}\n        Number\n      </label>\n      <input\n        className={s.formInput}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        id={contactInputId}\n        required\n      />\n      <br />\n      <button className={s.btnAdd} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\n\nexport default ContactForm;\n\n//===================REDUX_WITHOUT_TOOLKIT=================//\n\n// import { useState } from \"react\";\n// import shortid from \"shortid\";\n// import s from \"./ContactForm.module.css\";\n\n// function ContactForm({onSubmit}) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const contactInputId = shortid.generate();\n\n//   const handleChange = e => {\n//     const { name, value } = e.target;\n\n//    switch (name) {\n//      case \"name\":\n//        setName(value);\n//        break;\n\n//      case \"number\":\n//        setNumber(value);\n//        break;\n//      default:\n//        return;\n//    }\n//   //  console.log(e.target.name);\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n\n//     onSubmit({ name, number, id: contactInputId });\n//           reset();\n//       // console.log(onSubmit);    \n//   };\n\n//   const reset = () => {\n//     setName(\"\");\n//     setNumber(\"\");\n//   };\n\n//   return (\n//       <form onSubmit={handleSubmit} className={s.form}>\n//         <label htmlFor={contactInputId} className={s.labelForm}>\n//           Name\n//         </label>\n//         <input\n//           className={s.formInput}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={handleChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           id={contactInputId}\n//           required\n//         />\n//         <br />\n//         <label htmlFor={contactInputId} className={s.labelForm}>\n//           {\" \"}\n//           Number\n//         </label>\n//         <input\n//           className={s.formInput}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={handleChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           id={contactInputId}\n//           required\n//         />\n//         <br />\n//         <button className={s.btnAdd} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n// };\n\n\n// export default ContactForm;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactList.module.css\";\nimport { deleteContacts } from '../../redux/contacts/contacts-actions';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilterContacts } from \"../../redux/contacts/contacts-selector\";\n\n\nfunction ContactList() {\n  const contacts = useSelector(getFilterContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.contactList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.contactItem}>\n          <span className={s.nameForm}>{name}:</span>\n          <span className={s.numberForm}>{number}</span>\n          <button\n            className={s.btnDelete}\n            type=\"button\"\n            onClick={() => {\n             dispatch(deleteContacts(id)) \n            }}\n          >\n            <img\n              className={s.svgBtnDelete}\n              src=\"https://img.icons8.com/external-kiranshastry-lineal-color-kiranshastry/64/000000/external-delete-multimedia-kiranshastry-lineal-color-kiranshastry.png\"\n              alt=\"delete button\"\n            />\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n\nContactList.defaultProps = {\n  name: \"Name Surname\",\n  number: \"123 456 789\",\n};\n\nContactList.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactList;\n\n\n//===================REDUX_WITHOUT_TOOLKIT=================//\n// import React from \"react\";\n// import PropTypes from \"prop-types\";\n// import s from \"./ContactList.module.css\";\n// import { deleteContacts } from '../../redux/contacts/contacts-actions';\n// import { connect } from \"react-redux\";\n//\n//\n// function ContactList({ contacts,  deleteContacts}) {\n//   return (\n//     <ul className={s.contactList}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id} className={s.contactItem}>\n//           <span className={s.nameForm}>{name}:</span>\n//           <span className={s.numberForm}>{number}</span>\n//           <button\n//             className={s.btnDelete}\n//             type=\"button\"\n//             onClick={() => {\n//               deleteContacts(id)\n//             }}\n//           >\n//             <img\n//               className={s.svgBtnDelete}\n//               src=\"https://img.icons8.com/external-kiranshastry-lineal-color-kiranshastry/64/000000/external-delete-multimedia-kiranshastry-lineal-color-kiranshastry.png\"\n//               alt=\"delete button\"\n//             />\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// }\n// ContactList.defaultProps = {\n//   name: \"Name Surname\",\n//   number: \"123 456 789\",\n// };\n\n// ContactList.propTypes = {\n//   id: PropTypes.string,\n//   name: PropTypes.string,\n//   number: PropTypes.string,\n// };\n\n// const mapDispatchToProps = {\n//  deleteContacts\n// }\n\n// export default connect(null, mapDispatchToProps)(ContactList);","import s from \"./Container.module.css\";\n\nfunction Container({ title, children }) {\n  return (\n    <div className={s.container}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nexport default Container;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { getFilter} from \"../../redux/contacts/contacts-selector\";\nimport { changeContact } from \"../../redux/contacts/contacts-actions\";\nimport s from \"./Filter.module.css\";\n\nfunction Filter () {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(changeContact(e.target.value));\n  };\n\n\n return (\n  <label className={s.filterLabel}>\n    Find contacts by name\n    <input\n      className={s.formInput}\n      type=\"text\"\n      value={filter}\n      onChange={changeFilter}\n    />\n  </label>)\n};\n\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n\nexport default Filter;\n\n\n//===================REDUX_WITHOUT_TOOLKIT=================//\n\n// import React from \"react\";\n// import s from \"./Filter.module.css\";\n\n// const Filter = ({ value, onChange }) => (\n//   <label className={s.filterLabel}>\n//     Find contacts by name\n//     <input\n//       className={s.formInput}\n//       type=\"text\"\n//       value={value}\n//       onChange={onChange}\n//     />\n//   </label>\n// );\n\n// export default Filter;","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Container from \"./components/Container\";\nimport Filter from \"./components/Filter\";\n\n\nfunction App() {\n  \n  return (\n    <>\n      <Container title={\"Phonebook\"}>\n        <ContactForm />\n      </Container>\n\n      <Container title={\"Contacts\"}>\n        <Filter />\n        <ContactList />\n      </Container>\n    </>\n  );\n};\n\n\nexport default App;\n\n\n\n//===================REDUX_WITHOUT_TOOLKIT=================//\n\n// import \"./App.css\";\n// import ContactForm from \"./components/ContactForm\";\n// import ContactList from \"./components/ContactList\";\n// import Container from \"./components/Container\";\n// import Filter from \"./components/Filter\";\n// import {addContact, changeContact} from './redux/contacts/contacts-actions'\n// import { connect } from \"react-redux\";\n\n\n// function App({contacts,filter,changeContact,addContact}) {\n//   const formSubmitHandler = item => {\n  \n//     const normalizedName = item.name.toLowerCase();\n//     contacts.find(el =>\n//       {return el.name.toLowerCase() === normalizedName }\n//       )\n//       ? alert(`${item.name} is already in contacts`)\n//         : contacts.find(\n//           el=> {return el.number.toLowerCase() === item.number},\n//           )\n//           ? alert(`${item.number} is already in contacts`)\n//           : addNewContact(item);\n//           console.log(item);\n    \n//   };\n\n//   const addNewContact = item => {\n//     addContact(item);\n//     console.log('item:',item);\n//   };\n\n//   const filterContacts = () => {\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     )\n//       .sort((a, b) => a.name.localeCompare(b.name))\n//   };\n\n//   const changeFilter = ({target}) => {\n//     console.log(target.value);\n//     changeContact(target.value);\n//   };\n\n//   return (\n//       <>\n//         <Container title={\"Phonebook\"}>\n//         <ContactForm onSubmit={formSubmitHandler} />\n//         </Container>\n\n//         <Container title={\"Contacts\"}>\n//           <Filter value={filter} onChange={changeFilter} />\n//           <ContactList contacts={filterContacts()}\n           \n//           />\n//         </Container>\n//       </>\n//     );\n// }\n\n// const mapStateToProps = state => {\n//   console.log(state.contacts);\n//   return {\n//     contacts: state.contacts,\n//     filter: state.filter,\n//   };\n// };\n// const mapDispatchToProps = { changeContact, addContact };\n\n// export default connect(mapStateToProps,mapDispatchToProps)(App);","import { combineReducers } from \"redux\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsInit from \"../../contacts.json\";\r\nimport { addContact, changeContact, deleteContacts } from \"./contacts-actions\";\r\n\r\n\r\nconst initialState = [...contactsInit];\r\nconst initialFilter = '';\r\n\r\nconst contactReducer = createReducer(initialState, {\r\n    [addContact]: (state, { payload }) => [...state, payload],\r\n    [deleteContacts]: (state, { payload }) => state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(initialFilter, {\r\n    [changeContact]: (_,{payload})=>payload,\r\n})\r\n\r\nexport default combineReducers({\r\n    contacts: contactReducer,\r\n    filter: filterReducer,\r\n});\r\n\r\n\r\n//===================REDUX_WITHOUT_TOOLKIT=================//\r\n// import { combineReducers } from \"redux\";\r\n// import {ADD,DELETE,CHANGE_FILTER} from '../contacts/contacts-types';\r\n// import contactsInit from \"../../contacts.json\";\r\n\r\n\r\n// const initialState = [...contactsInit];\r\n// const initialFilter = '';\r\n\r\n\r\n// const contactReducer = (state = initialState, {type,payload}) => {\r\n//     switch (type) {\r\n//         case ADD:\r\n//             return [...state,payload];\r\n        \r\n//         case DELETE:\r\n//             return state.filter((contact) => contact.id !== payload);\r\n        \r\n//         default:\r\n//             return state;\r\n//     }\r\n   \r\n// };\r\n\r\n// const filterReducer = (state = initialFilter, { type, payload }) => {\r\n//     switch (type) {\r\n//         case CHANGE_FILTER:\r\n//             return payload;\r\n    \r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// export default combineReducers({\r\n//     contacts: contactReducer,\r\n//     filter: filterReducer,\r\n// });\r\n","import { configureStore,getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport rootReducer from \"./contacts/contacts-reducer\";\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n    }), logger];\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\n const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n\r\n export const store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n\r\n//===================REDUX_WITHOUT_TOOLKIT=================//\r\n\r\n// import { createStore} from \"redux\";\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import rootReducer from \"./contacts/contacts-reducer\";\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools())\r\n\r\n// export default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store, persistor } from './redux/store';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2CtBj\",\"labelForm\":\"ContactForm_labelForm__3QfC8\",\"formInput\":\"ContactForm_formInput__115N3\",\"btnAdd\":\"ContactForm_btnAdd__2qtQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgBtnDelete\":\"ContactList_svgBtnDelete__2u6x2\",\"btnDelete\":\"ContactList_btnDelete__1WWPe\",\"contactItem\":\"ContactList_contactItem__26OAU\",\"nameForm\":\"ContactList_nameForm__2-1iR\",\"numberForm\":\"ContactList_numberForm__2K5_p\"};"],"sourceRoot":""}